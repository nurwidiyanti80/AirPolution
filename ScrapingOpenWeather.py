# -*- coding: utf-8 -*-
"""ScrapingOpenWeather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OkkIrlqBZXle9rSmMxkDXOfTUgkQ3Ruk
"""

import requests
import pandas as pd

# Step 1: Your API key
API_KEY = "CreateYourAPIKey"

# Step 2: Coordinates for Jakarta
#latitude = -6.2146
#longitude = 106.8451

#Bahama
latitude =  25.0343
longitude = 106.8451


# Step 3: Request data
url = "https://api.openweathermap.org/data/2.5/air_pollution"
params = {
    "lat": latitude,
    "lon": longitude,
    "appid": API_KEY
}

response = requests.get(url, params=params)
data = response.json()

# Step 4: Extract components
components = data["list"][0]["components"]
aqi = data["list"][0]["main"]["aqi"]

# Step 5: Save to CSV
components["AQI"] = aqi
df = pd.DataFrame([components])
df.to_csv("jakarta_air_quality.csv", index=False)

# Step 6: Print results
print(df)

import requests
import time
from datetime import datetime
import pandas as pd

API_KEY = "CreateYourAPIKey"
lat, lon = -6.2146, 106.8451
start_date = "2025-01-01"
end_date = "2025-06-25"

def to_unix(dt_str):
    return int(time.mktime(datetime.strptime(dt_str, "%Y-%m-%d").timetuple()))

params = {
    "lat": lat,
    "lon": lon,
    "start": to_unix(start_date),
    "end": to_unix(end_date),
    "appid": API_KEY
}

url = "https://api.openweathermap.org/data/2.5/air_pollution/history"
response = requests.get(url, params=params)
data = response.json()

# 👉 Always check first:
if "list" not in data:
    print("ERROR in response:", data)
else:
    records = []
    for item in data["list"]:
        dt = datetime.utcfromtimestamp(item["dt"])
        components = item["components"]
        components["aqi"] = item["main"]["aqi"]
        components["datetime"] = dt
        records.append(components)

    df = pd.DataFrame(records)
    df.to_csv("jakarta_air_quality_range.csv", index=False)
    print(df.head())

import requests
import time
import pandas as pd
from datetime import datetime

# API Key OpenWeather
API_KEY = "CreateYourAPIKey"

# Konversi ke UNIX timestamp
def to_unix(date_str):
    return int(time.mktime(datetime.strptime(date_str, "%Y-%m-%d").timetuple()))

# Rentang tanggal
start_date = "2025-06-01"
end_date = "2025-06-25"
start_unix = to_unix(start_date)
end_unix = to_unix(end_date)

# Baca file negara dan koordinat
#country_df = pd.read_csv("sample_data/country_lat_long.csv")  # Pastikan file ini ada di folder yang sama
country_df = pd.read_csv("sample_data/country_lat_long_en.csv", encoding="ISO-8859-1")

# Coba baca dengan encoding alternatif
#try:
#    country_df = pd.read_csv("sample_data/country_lat_long.csv", encoding="utf-8")
#except UnicodeDecodeError:
#    country_df = pd.read_csv("sample_data/country_lat_long.csv", encoding="utf-16")

records = []

# Loop untuk setiap negara
for _, row in country_df.iterrows():
    country = row['country']
    lat = row['latitude']
    lon = row['longitude']

    url = "https://api.openweathermap.org/data/2.5/air_pollution/history"
    params = {
        "lat": lat,
        "lon": lon,
        "start": start_unix,
        "end": end_unix,
        "appid": API_KEY
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "list" in data:
            for item in data["list"]:
                dt = datetime.utcfromtimestamp(item["dt"])
                components = item["components"]
                components["aqi"] = item["main"]["aqi"]
                components["datetime"] = dt
                components["country"] = country
                records.append(components)
        else:
            print(f"❌ No data for {country} – {data}")
    except Exception as e:
        print(f"❌ Error for {country}: {e}")

    time.sleep(1)  # Hindari limit

# Simpan hasil
df = pd.DataFrame(records)
df.to_csv("combined_air_quality_by_country.csv", index=False)
print("✅ Selesai. Data disimpan sebagai combined_air_quality_by_country.csv")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("combined_air_quality_by_country.csv")
df['datetime'] = pd.to_datetime(df['datetime'])

# Plot: Average AQI by Country
plt.figure(figsize=(10, 6))
avg_aqi_country = df.groupby("country")["aqi"].mean().sort_values(ascending=False)
sns.barplot(x=avg_aqi_country.values, y=avg_aqi_country.index)
plt.title("Average AQI by Country")
plt.xlabel("Average AQI")
plt.ylabel("Country")
plt.tight_layout()
plt.show()

#VISUALIZATION
import pandas as pd
import plotly.express as px

# Load and prepare data
df = pd.read_csv("sample_data/combined_air_quality_by_country.csv")
df['datetime'] = pd.to_datetime(df['datetime'])

# Group by country and calculate average AQI
avg_aqi_country = df.groupby("country", as_index=False)["aqi"].mean().sort_values(by="aqi", ascending=False)

# Create colorful bar chart using Plotly
fig = px.bar(
    avg_aqi_country,
    x="aqi",
    y="country",
    orientation='h',
    color="country",
    title="Average AQI by Country",
    labels={"aqi": "Average AQI", "country": "Country"},
    color_discrete_sequence=px.colors.qualitative.Set2  # Colorful palette
)

fig.update_layout(yaxis=dict(categoryorder='total ascending'))
fig.show()

import plotly.express as px

# PM2.5 Boxplot
fig_pm25 = px.box(
    df,
    x="country",
    y="pm2_5",
    color="country",
    title="PM2.5 Distribution by Country",
    labels={"pm2_5": "PM2.5 (µg/m³)", "country": "Country"},
    color_discrete_sequence=px.colors.qualitative.Set2
)
fig_pm25.update_layout(xaxis_tickangle=-45)
fig_pm25.show()

# PM10 Boxplot
fig_pm10 = px.box(
    df,
    x="country",
    y="pm10",
    color="country",
    title="PM10 Distribution by Country",
    labels={"pm10": "PM10 (µg/m³)", "country": "Country"},
    color_discrete_sequence=px.colors.qualitative.Set3
)
fig_pm10.update_layout(xaxis_tickangle=-45)
fig_pm10.show()

import plotly.graph_objects as go

# Filter data for Indonesia and date range
mask = (df['country'] == 'Indonesia') & (df['datetime'] >= '2024-06-01') & (df['datetime'] <= '2025-06-30')
indonesia_pm2 = df[mask]

# WHO daily safe limit for PM2.5
safe_limit_pm25 = 15

# Create time series plot
fig = go.Figure()

# PM2.5 line
fig.add_trace(go.Scatter(
    x=indonesia_pm2['datetime'],
    y=indonesia_pm2['pm2_5'],
    mode='lines',
    name='PM2.5',
    line=dict(color='orange')
))

# WHO guideline limit line
fig.add_trace(go.Scatter(
    x=indonesia_pm2['datetime'],
    y=[safe_limit_pm25] * len(indonesia_pm2),
    mode='lines',
    name='WHO Safe Limit (15 µg/m³)',
    line=dict(color='red', dash='dash')
))

# Customize layout
fig.update_layout(
    title="Daily PM2.5 Trend in Indonesia (June 2024 – June 2025)",
    xaxis_title="Date",
    yaxis_title="PM2.5 (µg/m³)",
    legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
    template="plotly_white"
)

fig.show()

import plotly.express as px

# Compute correlation matrix
pollutants = ['co', 'no', 'no2', 'o3', 'so2', 'pm2_5', 'pm10', 'nh3', 'aqi']
corr_matrix = df[pollutants].corr().round(2).reset_index().melt(id_vars='index')
corr_matrix.columns = ['Pollutant X', 'Pollutant Y', 'Correlation']

# Create heatmap
fig = px.imshow(
    df[pollutants].corr().round(2),
    text_auto=True,
    color_continuous_scale='RdBu_r',
    title="Correlation Between Pollutants and AQI",
    labels=dict(color="Correlation"),
)

fig.update_layout(
    xaxis_title="Pollutant",
    yaxis_title="Pollutant",
    width=800,
    height=700
)

fig.show()